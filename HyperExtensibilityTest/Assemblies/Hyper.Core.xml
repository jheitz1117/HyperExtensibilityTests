<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hyper.Core</name>
    </assembly>
    <members>
        <member name="T:Hyper.ActivityTracking.TrackActivityEventHandler">
            <summary>
            Delegate to handle events fired by <see cref="T:Hyper.ActivityTracking.HyperActivityTracker"/> implementations.
            </summary>
            <param name="sender">The object that fired the event.</param>
            <param name="e">The <see cref="T:Hyper.ActivityTracking.TrackActivityEventArgs"/> object containing the event data.</param>
        </member>
        <member name="T:Hyper.ActivityTracking.HyperActivityTracker">
            <summary>
            Base class for tracking arbitrary activity events.
            </summary>
        </member>
        <member name="M:Hyper.ActivityTracking.HyperActivityTracker.OnTrackActivity(Hyper.ActivityTracking.TrackActivityEventArgs)">
            <summary>
            When overridden in a derived class, fires an event containing the specified <see cref="T:Hyper.ActivityTracking.TrackActivityEventArgs"/> object.
            </summary>
            <param name="e">The <see cref="T:Hyper.ActivityTracking.TrackActivityEventArgs"/> data for the event.</param>
        </member>
        <member name="E:Hyper.ActivityTracking.HyperActivityTracker.TrackActivityHandler">
            <summary>
            Allows consumers to respond to activity events.
            </summary>
        </member>
        <member name="T:Hyper.ActivityTracking.TrackActivityEventArgs">
            <summary>
            Event arguments for <see cref="T:Hyper.ActivityTracking.HyperActivityTracker"/> objects.
            </summary>
        </member>
        <member name="M:Hyper.ActivityTracking.TrackActivityEventArgs.#ctor(Hyper.Extensibility.ActivityTracking.IActivityItem)">
            <summary>
            Initializes an instance of <see cref="T:Hyper.ActivityTracking.TrackActivityEventArgs"/> using the specified <see cref="T:Hyper.Extensibility.ActivityTracking.IActivityItem"/>.
            </summary>
            <param name="activityItem">The <see cref="T:Hyper.Extensibility.ActivityTracking.IActivityItem"/> describing the event.</param>
        </member>
        <member name="P:Hyper.ActivityTracking.TrackActivityEventArgs.ActivityItem">
            <summary>
            The <see cref="T:Hyper.Extensibility.ActivityTracking.IActivityItem"/> describing the event.
            </summary>
        </member>
        <member name="T:Hyper.Cryptography.Md5Generator">
            <summary>
            MD5 hash wrapper for strings, files, and byte arrays.
            </summary>
        </member>
        <member name="F:Hyper.Cryptography.Md5Generator.PlainTextTransform">
            <summary>
            Specifies an <see cref="T:Hyper.Extensibility.IO.IStringTransform"/> instance to use when converting between plaintext strings and bytes. Required for string hashing but not for byte hashing.
            </summary>
        </member>
        <member name="F:Hyper.Cryptography.Md5Generator.CipherTextTransform">
            <summary>
            Specifies an <see cref="T:Hyper.Extensibility.IO.IStringTransform"/> instance to use when converting between ciphertext strings and bytes. Required for string hashing but not for byte hashing.
            </summary>
        </member>
        <member name="M:Hyper.Cryptography.Md5Generator.GetMd5(System.String)">
            <summary>
            Returns the uppercase MD5 hash string for the specified string value.
            </summary>
            <param name="plainValue">String value to hash.</param>
            <returns></returns>
        </member>
        <member name="M:Hyper.Cryptography.Md5Generator.GetFileMd5(System.String)">
            <summary>
            Returns the uppercase MD5 hash string for the specified file.
            </summary>
            <param name="filepath">Full path to the file to hash.</param>
            <returns></returns>
        </member>
        <member name="M:Hyper.Cryptography.Md5Generator.GetMd5(System.Byte[])">
            <summary>
            Returns the uppercase MD5 hash string for the specified byte array.
            </summary>
            <param name="inputBytes">Byte array to hash.</param>
            <returns></returns>
        </member>
        <member name="T:Hyper.Cryptography.SymmetricEncryptionConfiguration">
            <summary>
            Contains configuration options for <see cref="T:Hyper.Cryptography.SymmetricEncryptionService"/> objects.
            </summary>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionConfiguration.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Hyper.Cryptography.SymmetricEncryptionConfiguration"/> with default settings consisting of:
            <see cref="F:Hyper.Cryptography.SymmetricAlgorithmType.Aes"/> encryption using <see cref="F:System.Security.Cryptography.CipherMode.CBC"/> and <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7"/>.
            Plaintext strings are encoded using a UTF8 transform.
            All other strings (ciphertext, key, and IV strings) are encoded using a hex transform.
            </summary>
        </member>
        <member name="P:Hyper.Cryptography.SymmetricEncryptionConfiguration.AlgorithmType">
            <summary>
            Required. Specifies which symmetric algorithm to use for encryption.
            </summary>
        </member>
        <member name="P:Hyper.Cryptography.SymmetricEncryptionConfiguration.CustomSymmetricAlgorithm">
            <summary>
            Required if <see cref="T:Hyper.Cryptography.SymmetricAlgorithmType"/>.<see cref="F:Hyper.Cryptography.SymmetricAlgorithmType.Custom"/> is specified. Otherwise, optional.
            </summary>
        </member>
        <member name="P:Hyper.Cryptography.SymmetricEncryptionConfiguration.CipherMode">
            <summary>
            Specifies which <see cref="P:Hyper.Cryptography.SymmetricEncryptionConfiguration.CipherMode"/> to use for encryption. Required for all algorithms except <see cref="T:Hyper.Cryptography.SymmetricAlgorithmType"/>.<see cref="F:Hyper.Cryptography.SymmetricAlgorithmType.None"/>.
            </summary>
        </member>
        <member name="P:Hyper.Cryptography.SymmetricEncryptionConfiguration.PaddingMode">
            <summary>
            Specifies which <see cref="P:Hyper.Cryptography.SymmetricEncryptionConfiguration.PaddingMode"/> to use for encryption. Required for all algorithms except <see cref="T:Hyper.Cryptography.SymmetricAlgorithmType"/>.<see cref="F:Hyper.Cryptography.SymmetricAlgorithmType.None"/>.
            </summary>
        </member>
        <member name="P:Hyper.Cryptography.SymmetricEncryptionConfiguration.PlainTextTransform">
            <summary>
            Specifies an <see cref="T:Hyper.Extensibility.IO.IStringTransform"/> instance to use when converting between plaintext strings and bytes. Required for string encryption but not for byte encryption.
            </summary>
        </member>
        <member name="P:Hyper.Cryptography.SymmetricEncryptionConfiguration.CipherTextTransform">
            <summary>
            Specifies an <see cref="T:Hyper.Extensibility.IO.IStringTransform"/> instance to use when converting between ciphertext strings and bytes. Required for string encryption but not for byte encryption.
            </summary>
        </member>
        <member name="P:Hyper.Cryptography.SymmetricEncryptionConfiguration.KeyTransform">
            <summary>
            Specifies an <see cref="T:Hyper.Extensibility.IO.IStringTransform"/> instance to use when converting between key strings and bytes. Required unless SymmetricAlgorithmType.None is specified.
            </summary>
        </member>
        <member name="P:Hyper.Cryptography.SymmetricEncryptionConfiguration.IvTransform">
            <summary>
            Specifies an <see cref="T:Hyper.Extensibility.IO.IStringTransform"/> instance to use when converting between IV strings and bytes. Required unless SymmetricAlgorithmType.None is specified.
            </summary>
        </member>
        <member name="T:Hyper.Cryptography.SymmetricEncryptionService">
            <summary>
            Provides encryption services using the options in the specified <see cref="T:Hyper.Cryptography.SymmetricEncryptionConfiguration"/> instance.
            </summary>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionService.#ctor(Hyper.Cryptography.SymmetricEncryptionConfiguration)">
            <summary>
            Initializes a new instance of <see cref="T:Hyper.Cryptography.SymmetricEncryptionService"/> with the specified configuration.
            </summary>
            <param name="config">The <see cref="T:Hyper.Cryptography.SymmetricEncryptionConfiguration"/> to use for encryption.</param>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionService.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypts an array of bytes.
            </summary>
            <param name="input">Plaintext bytes to encrypt.</param>
            <param name="key">Encryption key bytes.</param>
            <param name="iv">Encryption IV bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionService.Encrypt(System.Byte[],System.String,System.String)">
            <summary>
            Encrypts an array of bytes.
            </summary>
            <param name="input">Plaintext bytes to encrypt.</param>
            <param name="key">Encryption key string.</param>
            <param name="iv">Encryption IV string.</param>
            <returns></returns>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionService.EncryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Encrypts a string.
            </summary>
            <param name="input">String to encrypt.</param>
            <param name="key">Encryption key bytes.</param>
            <param name="iv">Encryption IV bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionService.EncryptString(System.String,System.String,System.String)">
            <summary>
            Encrypts a string.
            </summary>
            <param name="input">String to encrypt.</param>
            <param name="key">Encryption key string.</param>
            <param name="iv">Encryption IV string.</param>
            <returns></returns>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionService.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts an array of bytes.
            </summary>
            <param name="input">Ciphertext bytes to decrypt.</param>
            <param name="key">Decryption key bytes.</param>
            <param name="iv">Decryption IV bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionService.Decrypt(System.Byte[],System.String,System.String)">
            <summary>
            Decrypts an array of bytes.
            </summary>
            <param name="input">Ciphertext bytes to decrypt.</param>
            <param name="key">Decryption key string.</param>
            <param name="iv">Decryption IV string.</param>
            <returns></returns>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionService.DecryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Decrypts a string.
            </summary>
            <param name="input">String to decrypt.</param>
            <param name="key">Decryption key bytes.</param>
            <param name="iv">Decryption IV bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionService.DecryptString(System.String,System.String,System.String)">
            <summary>
            Decrypts a string.
            </summary>
            <param name="input">String to decrypt.</param>
            <param name="key">Decryption key string.</param>
            <param name="iv">Decryption IV string.</param>
            <returns></returns>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionService.GenerateKey">
            <summary>
            Generates a random key byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionService.GenerateKeyString">
            <summary>
            Generates a random key string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionService.GenerateIv">
            <summary>
            Generates a random IV byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionService.GenerateIvString">
            <summary>
            Generates a random IV string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hyper.Cryptography.SymmetricEncryptionService.PerformByteTransformation(System.Byte[],System.Byte[],System.Byte[],Hyper.Cryptography.SymmetricEncryptionService.CryptoDirectionType)">
            <summary>
            Performs the specified cryptographic operation with the specified settings.
            </summary>
            <param name="input">Input bytes to transform.</param>
            <param name="key">Key bytes to use for the transform.</param>
            <param name="iv">IV bytes to use for the transform.</param>
            <param name="cryptoDirection">One of the Hyper.Cryptography.SymmetricEncryptionService.CryptoDirectionType values.</param>
            <returns></returns>
        </member>
        <member name="T:Hyper.Cryptography.SymmetricEncryptionService.CryptoDirectionType">
            <summary>
            Indicates whether we are encrypting or decrypting.
            </summary>
        </member>
        <member name="T:Hyper.Cryptography.SymmetricAlgorithmType">
            <summary>
            Symmetric algorithms supported by the <see cref="T:Hyper.Cryptography.SymmetricEncryptionService"/>.
            </summary>
        </member>
        <member name="F:Hyper.Cryptography.SymmetricAlgorithmType.None">
            <summary>
            Indicates that no encryption should be used and the bytes/strings should simply be transformed using the specified <see cref="T:Hyper.Extensibility.IO.IStringTransform"/>.
            </summary>
        </member>
        <member name="F:Hyper.Cryptography.SymmetricAlgorithmType.Custom">
            <summary>
            Indicates that a user-defined algorithm should be used.
            </summary>
        </member>
        <member name="F:Hyper.Cryptography.SymmetricAlgorithmType.TripleDes">
            <summary>
            Indicates that the Triple DES algorithm should be used.
            </summary>
        </member>
        <member name="F:Hyper.Cryptography.SymmetricAlgorithmType.Des">
            <summary>
            Indicates that the DES algorithm should be used.
            </summary>
        </member>
        <member name="F:Hyper.Cryptography.SymmetricAlgorithmType.Rc2">
            <summary>
            Indicates that the RC2 algorithm should be used.
            </summary>
        </member>
        <member name="F:Hyper.Cryptography.SymmetricAlgorithmType.Rijndael">
            <summary>
            Indicates that the Rijndael algorithm should be used.
            </summary>
        </member>
        <member name="F:Hyper.Cryptography.SymmetricAlgorithmType.Aes">
            <summary>
            Indicates that the AES algorithm should be used.
            </summary>
        </member>
        <member name="T:Hyper.IO.StringTransform">
            <summary>
            Provides factory methods to create instances of <see cref="T:Hyper.Extensibility.IO.IStringTransform"/>.
            </summary>
        </member>
        <member name="M:Hyper.IO.StringTransform.FromEncoding(System.Text.Encoding)">
            <summary>
            Returns an instance of <see cref="T:Hyper.Extensibility.IO.IStringTransform"/> that transforms strings using the specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use.</param>
            <returns></returns>
        </member>
        <member name="M:Hyper.IO.StringTransform.GetHexTransform">
            <summary>
            Returns an instance of <see cref="T:Hyper.Extensibility.IO.IStringTransform"/> that transforms hexidecimal strings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hyper.IO.StringTransform.GetBase64Transform">
            <summary>
            Returns an instance of <see cref="T:Hyper.Extensibility.IO.IStringTransform"/> that transforms Base64 strings.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hyper.IO.StringTransforms.Base64StringTransform">
            <summary>
            Transforms Base64-encoded <see cref="T:System.String"/> objects into <see cref="T:System.Byte"/> arrays and vice versa.
            </summary>
        </member>
        <member name="M:Hyper.IO.StringTransforms.Base64StringTransform.GetString(System.Byte[])">
            <summary>
            Transforms the specified <see cref="T:System.Byte"/> array into a Base64-encoded <see cref="T:System.String"/>.
            </summary>
            <param name="input">The <see cref="T:System.Byte"/> array to transform.</param>
            <returns></returns>
        </member>
        <member name="M:Hyper.IO.StringTransforms.Base64StringTransform.GetBytes(System.String)">
            <summary>
            Transforms the specified Base64-encoded <see cref="T:System.String"/> into a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to transform.</param>
            <returns></returns>
        </member>
        <member name="T:Hyper.IO.StringTransforms.EncodingStringTransform">
            <summary>
            Transforms <see cref="T:System.String"/> objects into <see cref="T:System.Byte"/> arrays and vice versa using a specific <see cref="F:Hyper.IO.StringTransforms.EncodingStringTransform._encoding"/>.
            </summary>
        </member>
        <member name="M:Hyper.IO.StringTransforms.EncodingStringTransform.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of <see cref="T:Hyper.IO.StringTransforms.EncodingStringTransform"/> using the specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Hyper.IO.StringTransforms.EncodingStringTransform.GetString(System.Byte[])">
            <summary>
            Transforms the specified <see cref="T:System.Byte"/> array into a <see cref="T:System.String"/> using the <see cref="T:System.Text.Encoding"/> provided in the constructor.
            </summary>
            <param name="input">The <see cref="T:System.Byte"/> array to transform.</param>
            <returns></returns>
        </member>
        <member name="M:Hyper.IO.StringTransforms.EncodingStringTransform.GetBytes(System.String)">
            <summary>
            Transforms the specified <see cref="T:System.String"/> into a <see cref="T:System.Byte"/> array using the <see cref="T:System.Text.Encoding"/> provided in the constructor.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to transform.</param>
            <returns></returns>
        </member>
        <member name="T:Hyper.IO.StringTransforms.HexStringTransform">
            <summary>
            Transforms <see cref="T:System.String"/> objects containing only hexidecimal digits into <see cref="T:System.Byte"/> arrays and vice versa.
            </summary>
        </member>
        <member name="M:Hyper.IO.StringTransforms.HexStringTransform.GetString(System.Byte[])">
            <summary>
            Transforms the specified <see cref="T:System.Byte"/> array into a hexidecimal <see cref="T:System.String"/>.
            </summary>
            <param name="input">The <see cref="T:System.Byte"/> array to transform.</param>
            <returns></returns>
        </member>
        <member name="M:Hyper.IO.StringTransforms.HexStringTransform.GetBytes(System.String)">
            <summary>
            Transforms the specified hexidecimal <see cref="T:System.String"/> into a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="input">The hexidecimal <see cref="T:System.String"/> to transform.</param>
            <returns></returns>
        </member>
        <member name="T:Hyper.WcfHosting.CancellableServiceHost">
            <summary>
            <see cref="T:System.ServiceModel.ServiceHost"/> implementation that supports cancellation.
            </summary>
        </member>
        <member name="M:Hyper.WcfHosting.CancellableServiceHost.#ctor(System.Type,System.Uri[])">
            <summary>
            Initializes a new instance of the <see cref="T:Hyper.WcfHosting.CancellableServiceHost"/> class with the type of service and its base addresses specified.
            </summary>
            <param name="type">The type of hosted service.</param>
            <param name="baseAddresses">An array of type <see cref="T:System.Uri"/> that contains the base addresses for the hosted service.</param>
        </member>
        <member name="M:Hyper.WcfHosting.CancellableServiceHost.#ctor(System.Object,System.Uri[])">
            <summary>
            Initializes a new instance of the <see cref="T:Hyper.WcfHosting.CancellableServiceHost"/> class with the instance of the service and its base addresses specified.
            </summary>
            <param name="singletonInstance">The instance of the hosted service.</param>
            <param name="baseAddresses">An array of type <see cref="T:System.Uri"/> that contains the base addresses for the hosted service.</param>
        </member>
        <member name="M:Hyper.WcfHosting.CancellableServiceHost.RegisterCancellationDelegate(System.Action)">
            <summary>
            Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken"/> is canceled.
            </summary>
            <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken"/> is canceled.</param>
        </member>
        <member name="M:Hyper.WcfHosting.CancellableServiceHost.RegisterCancellationDelegate(System.Action,System.Boolean)">
            <summary>
            Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken"/> is canceled.
            </summary>
            <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken"/> is canceled.</param>
            <param name="useSynchronizationContext">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext"/> and use it when invoking the <paramref name="callback"/>.</param>
        </member>
        <member name="M:Hyper.WcfHosting.CancellableServiceHost.RegisterCancellationDelegate(System.Action{System.Object},System.Object)">
            <summary>
            Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken"/> is canceled.
            </summary>
            <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken"/> is canceled.</param>
            <param name="state">The state to pass to the <paramref name="callback"/> when the delegate is invoked. This may be null.</param>
        </member>
        <member name="M:Hyper.WcfHosting.CancellableServiceHost.RegisterCancellationDelegate(System.Action{System.Object},System.Object,System.Boolean)">
            <summary>
            Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken"/> is canceled.
            </summary>
            <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken"/> is canceled.</param>
            <param name="state">The state to pass to the <paramref name="callback"/> when the delegate is invoked. This may be null.</param>
            <param name="useSynchronizationContext">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext"/> and use it when invoking the <paramref name="callback"/>.</param>
        </member>
        <member name="M:Hyper.WcfHosting.CancellableServiceHost.Cancel">
            <summary>
            Communicates a request for cancellation. This method can only be called when the <see cref="T:Hyper.WcfHosting.CancellableServiceHost"/> is in the <see cref="F:System.ServiceModel.CommunicationState.Opened"/>, <see cref="F:System.ServiceModel.CommunicationState.Faulted"/>, or <see cref="F:System.ServiceModel.CommunicationState.Closing"/> state.
            </summary>
        </member>
        <member name="M:Hyper.WcfHosting.CancellableServiceHost.OnAbort">
            <summary>
            Aborts the service.
            </summary>
        </member>
        <member name="M:Hyper.WcfHosting.CancellableServiceHost.OnClosing">
            <summary>
            Invoked during the transition of a communication object into the closing state.
            </summary>
        </member>
        <member name="M:Hyper.WcfHosting.CancellableServiceHost.OnClosed">
            <summary>
            Disposes of disposable services that are being hosted when the service host is closed.
            </summary>
        </member>
        <member name="T:Hyper.WcfHosting.DefaultServiceHostExceptionHandler">
            <summary>
            Default implementation of <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> that writes exceptions to the <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
        </member>
        <member name="M:Hyper.WcfHosting.DefaultServiceHostExceptionHandler.HandleException(System.Exception)">
            <summary>
            Calls <see cref="M:System.Exception.ToString"/> on the specified <see cref="T:System.Exception"/> and writes the results to <see cref="T:System.Diagnostics.Trace"/>.<see cref="M:System.Diagnostics.Trace.WriteLine(System.Object)"/>.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to trace.</param>
        </member>
        <member name="T:Hyper.WcfHosting.HyperServiceHostContainer">
            <summary>
            Simplifies self-hosting for <see cref="T:System.ServiceModel.ServiceHost"/> objects.
            Supports singleton service contract implementations that implement <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:Hyper.WcfHosting.HyperServiceHostContainer.#ctor(System.Func{System.ServiceModel.ServiceHost},Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler)">
            <summary>
            Initializes an instance of <see cref="T:Hyper.WcfHosting.HyperServiceHostContainer"/> with the specified factory method and <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> implementation.
            </summary>
            <param name="factory">The delegate that is invoked to create the <see cref="T:System.ServiceModel.ServiceHost"/> object to wrap.</param>
            <param name="exceptionHandler">The <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> implementation to use when any is thrown.</param>
        </member>
        <member name="M:Hyper.WcfHosting.HyperServiceHostContainer.#ctor(System.Func{System.ServiceModel.ServiceHost},Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler,Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler,Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler)">
            <summary>
            Initializes an instance of <see cref="T:Hyper.WcfHosting.HyperServiceHostContainer"/> with the specified factory method and <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> implementations.
            </summary>
            <param name="factory">The delegate that is invoked to create the <see cref="T:System.ServiceModel.ServiceHost"/> object to wrap.</param>
            <param name="timeoutExceptionHandler">The <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> implementation to use when a <see cref="T:System.TimeoutException"/> is thrown.</param>
            <param name="communicationExceptionHandler">The <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> implementation to use when a <see cref="T:System.ServiceModel.CommunicationException"/> is thrown.</param>
            <param name="genericExceptionHandler">The <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> implementation to use when an <see cref="T:System.Exception"/> is thrown that is not a <see cref="T:System.TimeoutException"/> or a <see cref="T:System.ServiceModel.CommunicationException"/>.</param>
        </member>
        <member name="M:Hyper.WcfHosting.HyperServiceHostContainer.#ctor(Hyper.Extensibility.WcfHosting.IServiceHostFactory,Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler)">
            <summary>
            Initializes an instance of <see cref="T:Hyper.WcfHosting.HyperServiceHostContainer"/> with the specified <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostFactory"/> and <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> implementations.
            </summary>
            <param name="hostFactory">The <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostFactory"/> that is used to create the <see cref="T:System.ServiceModel.ServiceHost"/> object to wrap.</param>
            <param name="exceptionHandler">The <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> implementation to use when any is thrown.</param>
        </member>
        <member name="M:Hyper.WcfHosting.HyperServiceHostContainer.#ctor(Hyper.Extensibility.WcfHosting.IServiceHostFactory,Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler,Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler,Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler)">
            <summary>
            Initializes an instance of <see cref="T:Hyper.WcfHosting.HyperServiceHostContainer"/> with the specified <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostFactory"/> and <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> implementations.
            </summary>
            <param name="hostFactory">The <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostFactory"/> that is used to create the <see cref="T:System.ServiceModel.ServiceHost"/> object to wrap.</param>
            <param name="timeoutExceptionHandler">The <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> implementation to use when a <see cref="T:System.TimeoutException"/> is thrown.</param>
            <param name="communicationExceptionHandler">The <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> implementation to use when a <see cref="T:System.ServiceModel.CommunicationException"/> is thrown.</param>
            <param name="genericExceptionHandler">The <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> implementation to use when an <see cref="T:System.Exception"/> is thrown that is not a <see cref="T:System.TimeoutException"/> or a <see cref="T:System.ServiceModel.CommunicationException"/>.</param>
        </member>
        <member name="M:Hyper.WcfHosting.HyperServiceHostContainer.Start">
            <summary>
            Creates the <see cref="T:System.ServiceModel.ServiceHost"/> if it does not exist and calls its Open() method. Exception handling is
            delegated to the <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> implementations specified in the constructor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hyper.WcfHosting.HyperServiceHostContainer.Stop">
            <summary>
            Calls the <see cref="M:System.ServiceModel.Channels.CommunicationObject.Abort"/> method if it is in the <see cref="F:System.ServiceModel.CommunicationState.Faulted"/> state.
            Otherwise, calls the <see cref="M:System.ServiceModel.Channels.CommunicationObject.Close"/> method instead.
            Calls <see cref="M:System.IDisposable.Dispose"/> on the hosted service if it implements <see cref="T:System.IDisposable"/>.
            Exception handling is delegated to the <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostExceptionHandler"/> implementations specified in the constructor.
            </summary>
        </member>
        <member name="P:Hyper.WcfHosting.HyperServiceHostContainer.Endpoints">
            <summary>
            List of endpoints on which the <see cref="T:System.ServiceModel.ServiceHost"/> is listening.
            </summary>
        </member>
        <member name="T:Hyper.WcfHosting.ServiceHostFactoryMethodWrapper">
            <summary>
            <see cref="T:Hyper.Extensibility.WcfHosting.IServiceHostFactory"/> implementation to wrap a factory method that creates instances of <see cref="T:System.ServiceModel.ServiceHost"/>.
            </summary>
        </member>
        <member name="M:Hyper.WcfHosting.ServiceHostFactoryMethodWrapper.#ctor(System.Func{System.ServiceModel.ServiceHost})">
            <summary>
            Initializes an instance of <see cref="T:Hyper.WcfHosting.ServiceHostFactoryMethodWrapper"/> using the specified factory method.
            </summary>
            <param name="factory">The delegate that is invoked to create the <see cref="T:System.ServiceModel.ServiceHost"/> object.</param>
        </member>
        <member name="M:Hyper.WcfHosting.ServiceHostFactoryMethodWrapper.Create">
            <summary>
            Creates an instance of <see cref="T:System.ServiceModel.ServiceHost"/> using the specified factory method.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
